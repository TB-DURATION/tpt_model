---
title: "TPT model"
format: html
editor: source
toc: true
toc-depth: 4
number-sections: true
echo: true
code-fold: false
warning: false
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo       = TRUE,
                      message    = FALSE,
                      cache      = TRUE,
                      autodep    = TRUE,
#                      dev.args   = list(pointsize = 11),
                      fig.height = 5,
                      fig.width  = 1.4 * 5,
                      fig.retina = 2,
                      fig.align  = "center")
```

All the data and source code files are [here](https://github.com/TB-DURATION/tpt-model).

You can ask report errors or for additional analysis [here](https://github.com/TB-DURATION/tpt-model/issues).

## Introduction

## Packages

Required: `deSolve`, `tibble`, `purrr`, `dplyr`, `magrittr`, `bbmle`, `RColorBrewer`,
`parallel`

```{r}
library(tibble)
library(purrr)
library(dplyr)
library(magrittr)
library(bbmle)
```

## Utilitary functions

```{r}
lwd_val <- 2
```

```{r}
ode2 <- function(...) tibble::as_tibble(as.data.frame(deSolve::ode(...)))
```

```{r}
seq2 <- function(...) seq(..., le = 512)
```

```{r}
plotl <- function(...) plot(..., type = "l", lwd = 2)
```

```{r}
lines2 <- function(...) lines(..., lwd = 2)
```

```{r}
legend2 <- function(...) legend(..., bty = "n")
```

```{r}
dpois2 <- function(...) dpois(..., log = TRUE)
```

```{r}
abline2 <- function(..., col = 2) abline(..., lwd = lwd_val, col = col)
```

```{r}
plot2 <- function(..., col = 4) plot(..., type = "l", lwd = lwd_val, col = col)
```

```{r}
plot4 <- function(...) plot2(..., xlab = "actual duration of treatment (days)")
```

```{r}
legend2 <- function(...) legend(..., lty = 1, lwd = lwd_val, bty = "n")
```

```{r}
polygon2 <- function(x, y, col = 4, alpha = .2, ...) {
  polygon(c(x[1], x, tail(x, 1)), c(0, y, 0), col = adjustcolor(col, alpha),
          border = NA)
}
```

```{r}
polygon3 <- function(x, y1, y2, col = 4, ...) {
  polygon(c(x, rev(x)), c(y1, rev(y2)), col = col, border = NA, ...)
}
```

```{r}
mclapply2 <- function(...) {
  parallel::mclapply(..., mc.cores = parallel::detectCores() - 1)
}
```


## Prophylaxis model

### The Hill equation

In what follows we will model many phenomena phenomenologically using the
3-parameter monotonically increasing Hill equation, the general equation of
which is

$$
y = Y\frac{x^h}{X^h + x^h}
$$

where $Y$ is the maximum value that $y$ can take, $X$ is the value of $x$ at
which $y$ reaches half of its maximum value $Y$ and $h$ is the Hill coefficient
that controls the shape of the relationship with S-shape for $0 < h < 1$ and a
simple saturating shape when $h \ge 1$.

```{r}
hill <- function(x, X, Y, h) {
  x2h <- x^h
  Y * x2h / (X^h + x2h)
}
```

Let's illustrate the properties of this equation:

```{r}
xs <- seq2(0, 40)
X <- 15
Y <- .8

plot(NA, xlim = c(0, max(xs)), ylim = c(0, Y), xlab = "x values", ylab = "y values")
abline2(v = X, col = "grey")
abline2(h = Y, col = "grey")

hs <- exp(seq(-3, 3))
cols <- rev(RColorBrewer::brewer.pal(n = length(hs), "Spectral"))
walk2(hs, cols, ~ lines2(xs, hill(xs, X, Y, h = .x), col = .y))
```

### Treatment uptake

We can model the probability $\upsilon(d)$ of treatment uptake as a function of the
proposed treatment duration $d$ using a Hill equation as so:

$$
\upsilon(d) = \frac{X_\upsilon^{h_\upsilon}}{X_\upsilon^{h_\upsilon} + d^{h_\upsilon}}
$$

In R:

```{r}
uptake <- function(pd, Xv, hv) {
  X2h <- Xv ^ hv
  X2h / (X2h + pd ^ hv)
}
```

An example:

```{r}
ds <- seq2(0, 30)
plot2(ds, uptake(ds, 15, 4), ylim = 0:1,
      xlab = "duration of treatment (days)", ylab = "uptake probability")
```

### Treatment adherence

#### Conditional dropping probability

Call $p(t)$ the probability that a person who, at day $t$, has not stopped her treatment
yet, decides to stop it. This probability could be constant and independent of the
duration the person has been in the treatment. On the contrary, we could imagine that
this probability could depend on the duration the person has been in the treatment. And
this dependency could result from 2 effects:

* a **fatigue effect** whereby $p(t)$ would increase with $t$;
* a **finish-line effect** whereby $p(t)$ would decreases nearby the end of treatment.

In order to account for all these possibilities, we model the fatigue effect as a
probability $f(t)$ increasing with time $t$ being in the treatment according to a Hill
equation:

$$
f(t) = Y_f\frac{t^{h_f}}{X_f^{h_f} + t^{h_f}}
$$

and the finish-line effect as a decreasing mitigation weight $m(t) \in [0, 1]$ of
$f(t)$, also modelled with a Hill equation as so:

$$
m(t) = 1 - Y_m\frac{t^{h_m}}{X_m^{h_m} + t^{h_m}}
$$

where $Y_m \leq 1$. From here the conditional probability $p(t)$ reads

$$
p(t) = m(t) \times f(t)
$$

Let's look at some examples:

```{r}
probabilities <- function(
    pd = 40,                      # proposed duration of treatment
    Xf  = 25,   Yf = .8, hf = 7,  # fatigue
    Xmp = .875, Ym = 1,  hm = 50, # mitigation of fatigue
    lwd = 2,
    ylim = 0:1,
    add = FALSE,
    lgnd = TRUE) {                # whether to add the legend to the plot or not
  
  Xm <- Xmp * pd
  ts <- seq2(0, pd)

  fatigue <- hill(ts, Xf, Yf, hf)
  mitigation <- 1 - hill(ts, Xm, Ym, hm)
  
  if (! add) plot(ts, fatigue, ylim = ylim, col = 3, type = "l", lwd = lwd,
                  xlab = "time in treatment (days)",
                  ylab = "probability or mitigation factor")
  lines2(ts, mitigation, col = 2)
  lines2(ts, mitigation * fatigue, col = 4)
  
  if (lgnd & ! add)
    legend2("left", col = c(3, 2, 4),
            legend = c("fatigue", "mitigation of fatigue", "dropping probability"))
}
```

Executing the function:

```{r}
probabilities()
```

Note that this model accounts for the special case where $p(t)$ is a constant
independent of time:

```{r}
probabilities(hf = 0, hm = 0, Ym = .05, Yf = .4)
```

#### Duration of treatment distribution

From $p(t)$ we can express the probability that somebody stops her treatment exactly at
time $t$ as

$$
P(t) = p(t)\prod_{x=0}^{{}^{-}t}(1 - p(x))^{dx}
$$

The density of probability of the actual duration of treatment (*aka*
**effective duration of treatment**) can then be expressed by:

$$
\varphi(t, d) = \frac{P(t)}{\int_{0}^d P(x)dx}
$$

where $d$ is the **proposed duration of treatment**. Let's see this in R. First a
function that computes the dropping probability:

```{r}
dropping_probability <- function(
    pd = 40,                        # proposed duration of treatment
    Xf  = 25,   Yf = .8, hf = 7,    # fatigue
    Xmp = .875, Ym = 1,  hm = 50,   # mitigation of fatigue
    by = pd / (le - 1), le = 512) { # sampling day in the treatment

  ts <- seq(0, pd, by)
  tibble(x = ts,
         y = hill(ts, Xf, Yf, hf) * (1 - hill(ts, Xmp * pd, Ym, hm)))
}
```

This is what it gives:

```{r}
dropping_probability()
```

where the first column is the time $t$ in treatment and the second column the
conditional probability $p(t)$ of dropping. This function is used by the following one
to compute the probability distribution of the effective duration of treatment:

```{r}
effective_duration <- function(
    pd = 40,                        # proposed duration of treatment
    Xf  = 25,   Yf = .8, hf = 7,    # fatigue
    Xmp = .875, Ym = 1,  hm = 50,   # mitigation of fatigue
    by = pd / (le - 1), le = 512) { # sampling effective durations of treatment
  
  dp <- dropping_probability(pd, Xf, Yf, hf, Xmp, Ym, hm, by, le)
  y <- dp$y
  dens <- c(y[1], y[-1] * cumprod(1 - y[-length(y)]))
  tibble(x = dp$x,
         y = dens / sum(dens))
}
```

Let's try it:

```{r}
with(effective_duration(), {
  plot4(x, y, ylab = "probability density")
  polygon2(x, y)
})
```

A function that helps visualizing the relationship between proposed duration of
treatment (vertical grey lines) and the distribution of the actual duration of
treatment (in blue):

```{r}
explore_dropping <- function(
    Xf  = 200,  Yf  = .15, hf  = 7,
    Xmp = .875, Ym  = 1,   hm  = 50,
    by  = .1, ylim = c(0, .2),
    proposed_durations = c(20, 40, seq(60, 100, 10))) {

  proposed_durations <- sort(proposed_durations)

  eds <- map(proposed_durations,
             ~ effective_duration(.x, Xf, Yf, hf, Xmp, Ym, hm, by))
  
  opar <- par(mfrow = 2:1, plt = c(.1, .96, .21, .93))
  
  probabilities(tail(proposed_durations, 1),
                Xf, Yf, hf, Xmp, Ym, hm, lwd = 4, ylim = ylim, lgnd = FALSE)
  walk(head(proposed_durations, -1),
       ~ probabilities(.x, Xf, Yf, hf, Xmp, Ym, hm, add = TRUE))
  
  plot(NA,
       xlim = c(0, max(proposed_durations)),
       ylim = c(0, max(unlist(map(eds, ~ .x$y)))),
       xlab = "effective duration of treatment (days)",
       ylab = "probability density")
  walk(eds, ~ with(.x, {
    lines2(.x$x, .x$y, col = 4)
    polygon2(x, y)
  }))
  abline2(v = proposed_durations, col = "grey")
  
  par(opar)
}
```

Let's play with it:

```{r fig.height = 6}
explore_dropping(Xmp = .95, hm = 50, ylim = c(0, .0007))
```

A function to draw durations from the distribution:

```{r}
draw_durations <- function(
    pd = 40,                        # proposed duration of treatment
    Xf  = 25,   Yf = .8, hf = 7,    # fatigue
    Xmp = .875, Ym = 1,  hm = 50,   # mitigation of fatigue
    by = pd / (le - 1), le = 512,   # sampling effective durations of treatment 
    n = 1000) {                     # number to draw
  with(effective_duration(pd, Xf, Yf, hf, Xmp, Ym, hm, by, le), sample(x, n, TRUE, y)) 
}                    
```

Let's try it:

```{r}
draw_durations(n = 10)
```


### Treatment efficacy

We can assume that the treatment efficacy $\varepsilon(\phi)$ as a function of the
actual duration $\phi$ of treatment also follows a Hill equation:

$$
\varepsilon(\phi) = Y_\varepsilon\frac{\phi^{h_\varepsilon}}{X_\varepsilon^{h_\varepsilon}
                    + \phi^{h_\varepsilon}}
$$

An illustration:

```{r}
ts <- seq2(0, 30)
plot4(ts, hill(ts, 10, 1, 1), ylim = 0:1, ylab = "treatment efficacy")
```

### Full prophylaxis

The $\pi$ proportion of the epidemiological model can now be expressed as:

$$
\pi(d, \theta_\upsilon, \theta_\varepsilon) = \tau \times \upsilon(d, \theta_\upsilon) \times \varepsilon(d, \theta_\varepsilon)
$$

where $\tau$ is the proportion of recent infections that can be identified through
contact tracing and $d$ is the proposed duration of treatment. In R:

```{r}
pi_value <- function(
    tau = .99,
    pd = 10,
    
    Xv  = 15, hv = 4,
    Xf  = 200,  Yf = .15, hf = 7,
    Xmp = .875, Ym = 1,   hm = 50,
    Xe  = 10,   Ye = 1,   he = 1,
    
    by = pd / (le - 1), le = 512,
    n = 1000) {
  
  tau *
    uptake(pd, Xv, hv) *
    hill(draw_durations(pd, Xf, Yf, hf, Xmp, Ym,  hm, by, le, n), Xe, Ye, he)
}
```

Let's try it:

```{r include=FALSE, eval=FALSE}
pi_value(tau = .9, pd = 10, n = 1e4, le = 1e6) |> 
  density() |> 
  with({
    plot2(x, y, xlab = "proportion of new infections sterilized",
          ylab = "density of probability", xlim = 0:1)
    polygon2(x, y)}
  )
```

```{r}
tau_vals <- c(.2, .5, .75, .9, 1)

out1 <- tau_vals |>
  map(~ pi_value(tau = .x, pd = 10, n = 1e4, le = 1e6)) |> 
  map(density)

plot2(NA, xlim = 0:1, ylim = c(0, max(unlist(map(out1, extract2, "y")))),
      xlab = "proportion of new infections sterilized", ylab = "density of probability")

walk2(out1, seq_along(tau_vals), ~ with(.x, {
  polygon2(x, y, col = .y)
  lines2(x, y, col = .y)
}))

add_legend_sterilization <- function(...) {
  legend2("topright", legend = paste0(rev(100 * tau_vals), "%"),
          col = rev(seq_along(tau_vals)),
          title = "percentage of recent infections identified")
}

add_legend_sterilization()
```

A function that plot a quantile distribution along the $y$-axis:

```{r}
quantplot <- function(x, y, probs = c(.025, seq(.05, .95, .05), .975),
                      col = adjustcolor(4, .07)) {
  y <- map_dfr(y, quantile, probs)
  nbcol <- ncol(y)
  nb <- (nbcol - (nbcol %% 2)) / 2 - 1
  walk(0:nb, ~ polygon3(x, y[[1 + .x]], y[[nbcol - .x]], col = col))
}
```

Let's generate the distribution of the proportion of new infections sterilized for
various proposed durations of treatment (about 1'40"):

```{r}
pd_vals <- seq(1, 40, le = 512)
out <- map(tau_vals,
           ~ mclapply2(pd_vals,
                       function(x) pi_value(pd = x, tau = .x, n = 1e4, le = 1e6)))
```

This gives:

```{r}
plot(NA, xlim = c(0, 45), ylim = 0:1,
     xlab = "proposed duration of treatment (days)",
     ylab = "proportion of new infections sterilized")

walk2(out,
      seq_along(out),
      ~ quantplot(pd_vals, .x,  probs = seq(.025, .975, le = 75),
                  col = adjustcolor(.y, .03)))

add_legend_sterilization()
```


## Epidemiological consequences

### A minimalist SID

![Flow diagram of a minimalist SID model.](SIDbis.png){width=460 #fig-tinySID}

#### Dynamics

$$
\begin{align} 
  \frac{dS}{dt} &= \sigma I + \alpha D - (1 - \pi) \beta DS \\
  \frac{dI}{dt} &= (1 - \pi) \beta DS - (\delta + \sigma) I   \\
  \frac{dD}{dt} &= \delta I - \alpha D
\end{align}
$$

R code:

```{r}
sid_dyn <- function(N, I0 = 0, D0, beta, sigma, pi, delta, alpha, times) {
  ode2(c(S = N - I0 - D0, I = I0, D = D0),
       times,
       function(time, state, pars) {
         with(as.list(c(state, pars)), {
           infection <- (1 - pi) * beta * D * S
           dS  <- sigma * I + alpha * D - infection
           dI  <- infection - (delta + sigma) * I
           dD  <- delta * I - alpha * D
           list(c(dS, dI, dD))
         })
       },
       c(beta = beta, sigma = sigma, pi = pi, delta = delta, alpha = alpha))
}
```

#### Equilibrium

$$
\begin{align} 
  S^* &= N - I^* - D^*             \\
  I^* &= \frac{\alpha}{\delta} D^* \\
  D^* &= \frac{\delta}{\alpha + \delta} N -
         \frac{\alpha}{\alpha + \delta} \frac{\delta + \sigma}{(1 - \pi)\beta}
\end{align}
$$

R code:

```{r}
sid_equ <- function(N, beta, sigma, pi, delta, alpha) {
  Dstar <- delta * N / (alpha + delta) - alpha * (delta + sigma) /
           ((alpha + delta) * (1 - pi) * beta)
  Istar <- alpha * Dstar / delta
  c(S = N - Istar - Dstar, I = Istar, D = Dstar)
}
```

A function that plots the dynamics and equilibrium values of the infection prevalence
and the disease incidence and prevalence:

```{r}
plot_dyn_equ <- function(
    N     = 1e5,
    D0    = 350,
    beta  = .000001,
    sigma = 0,
    pi    = 0,
    delta = .0001,
    alpha = 1 / 70,
    times = seq2(0, 25000)) {
  sims <- sid_dyn(N = N, I0 = 0, D0 = D0, beta = beta, sigma = sigma, pi = pi,
                  delta = delta, alpha = alpha, times = times)

  equs <- sid_equ(N = N, beta = beta, sigma = sigma, pi = pi,
                  delta = delta, alpha = alpha)
  
  plotl2 <- function(...) plotl(..., xlab = "time (year)")
  
  opar <- par(mfrow = c(1, 3), cex = 1, plt = c(.25, .95, .25, .9))
  with(sims, {
    plotl2(time, I, col = 2, ylab = "infection prevalence")
    abline(h = equs["I"], col = 2)
    plotl2(time, D, col = 3, ylab = "disease prevalence")
    abline(h = equs["D"], col = 3)
    plotl2(time, delta * I, col = 4, ylab = "yearly disease incidence")
    abline(h = delta * equs["I"], col = 4)
  })
  par(opar)
}
```

Let's do some verification:

```{r fig.height = 2.7}
plot_dyn_equ()
```


#### Calibration

In absence of TPT (i.e. $\pi = 0$), let's further assume that $\sigma = 0$. Let's call
$d$ the yearly disease incidence. Then,

$$
\begin{align} 
  \delta &= \frac{d^*}{I^*}             \\
  \alpha &= \frac{D^*}{d^*}   \\
  \beta  &= \frac{N}{\alpha} - \frac{\alpha + \delta}{\alpha \delta} D^*
\end{align}
$$

Corresponding R code:

```{r}
param_val <- function(inf_prev, dis_prev, dis_incd, N = 1e5) {
  delta <- dis_incd / inf_prev
  alpha <- dis_incd / dis_prev
  c(alpha = alpha,
    beta  = alpha * delta / (delta * N - (alpha + delta) * dis_prev),
    delta = delta)
}
```

In Vietnam:

* prevalence of infection: somewhere between 10 and 30% of the population?
* prevalence of disease: 176 / 100,000
* yearly incidence of disease: 322 / 100,000

```{r}
(p_val <- param_val(2e4, 176, 322))
```

Let's see:

```{r fig.height = 2.7}
plot_dyn_equ(D0    = 176,
             beta  = p_val[["beta"]],
             delta = p_val[["delta"]],
             alpha = p_val[["alpha"]],
             times = seq2(0, 3000))
```


### TPT consequences

A function that explores the epidemiological consequences of the value of $\pi$:

```{r}
pi_effect <- function(pis, N = 1e5, I0 = 2e4, D0 = 176, d0 = 322, times = seq2(0, 50)) {
  p_val <- param_val(I0, D0, d0, N)
  pis |>
    map(sid_dyn, N = N, I0 = I0, D0 = D0, sigma = 0, times = times,
        beta  = p_val[["beta"]], 
        delta = p_val[["delta"]],
        alpha = p_val[["alpha"]]) |> 
    map(mutate, dis_inc = p_val[["delta"]] * I)
}
```

Let's try it:

```{r}
plot(NA, xlim = 2025 + c(0, 50), ylim = c(0, 322),
     xlab = "year", ylab = "disease incidence (/100,000/year)")
seq(0, 1, .1) |> 
  pi_effect() |> 
  walk(~ with(.x, lines(2025 + time, dis_inc)))
```

