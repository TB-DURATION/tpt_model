---
title: "TPT model"
format: html
editor: source
toc: true
number-sections: true
echo: true
code-fold: false
warning: false
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo       = TRUE,
                      message    = FALSE,
                      cache      = TRUE,
                      autodep    = TRUE,
#                      dev.args   = list(pointsize = 11),
                      fig.height = 5,
                      fig.width  = 1.4 * 5,
                      fig.retina = 2,
                      fig.align  = "center")
```

All the data and source code files are [here](https://github.com/TB-DURATION/tpt-model).

You can ask report errors or for additional analysis [here](https://github.com/TB-DURATION/tpt-model/issues).

## Introduction

## Packages

Required: `deSolve`, `tibble`, `purrr`, `dplyr`, `magrittr`, `bbmle`

```{r}
library(tibble)
library(purrr)
library(dplyr)
library(magrittr)
library(bbmle)
```

## Utilitary functions

```{r}
ode2 <- function(...) tibble::as_tibble(as.data.frame(deSolve::ode(...)))
```

```{r}
seq2 <- function(...) seq(..., le = 512)
```

```{r}
plotl <- function(...) plot(..., type = "l", lwd = 2)
```

```{r}
lines2 <- function(...) lines(..., lwd = 2)
```

```{r}
legend2 <- function(...) legend(..., bty = "n")
```

```{r}
dpois2 <- function(...) dpois(..., log = TRUE)
```

## Epidemiological models

### $SID$ model

The simplest model we could imagine is a model with only 3 variables: those not
infected, those infected but not infectious, and those infected, sick and infectious.
This model contains human demography but the total population size is kept constant
(i.e. birth and death rates are equal). It also contains:

* clearance from infected, from natural immunity of through prophylactic treatment
* recovery from disease, with and without clearance, from natural immunity or through
  curative treatment
* possibility of relapse (following recovery without clearance)
* mortality from disease

![Flow diagram of the SID epidemiological model.](SID.png){width=450 #fig-SID}

#### Variables

* $S$: non-infected
* $I$: infected (and not infectious)
* $D$: sick and infectious

Note that $S + I + D = N$ where $N$ is a constant.

#### Parameters

* $\beta$: infectious contact rate (/ind)
* $\delta$: progression rate of infection to disease
* $\sigma$: clearance rate of infected through natural immunity 
* $\pi$: clearance rate of infected through prophylactic treatment
* $\gamma$: rate of disease recovery from natural immunity
* $p$: probability that disease recovery from natural immunity comes with clearance
* $\tau$: rate of disease recovery from curative treatment
* $q$: probability that disease recovery from curative treatment comes with clearance
* $\alpha$: death rate due to disease
* $\mu$: natural birth and death rates

#### Dynamics

Differential equations

$$
\begin{align} 
  \frac{dS}{dt}   &= (\sigma + \mu + \tau) I +
                     (p \gamma + q \tau + \alpha + \mu) D - \beta D S                 \\
  \frac{dI}{dt}   &= \beta D S + ([1 - p] \gamma + [1 - q] \tau) D -
                     (\delta + \sigma + \mu + \tau) I                                 \\
  \frac{dD}{dt}   &= \delta I - (\gamma + \tau + \alpha + \mu) D
\end{align}
$$

R code:

```{r}
sid <- function(
    S0, I0, D0, beta, delta, sigma, pi, gamma, p, tau, q, alpha, mu, times) {
  
  N <- S0 + I0 + D0
  
  ode2(c(S = S0, I = I0, D = D0),
       times,
       function(time, state, pars) {
         with(as.list(c(state, pars)), {
           foi <- beta * D * S
           dS  <- (sigma + mu + tau) * I + (p * gamma + q * tau + alpha + mu) * D - foi
           dI  <- foi + ((1 - p) * gamma + (1 - q) * tau) * D -
                  (delta + sigma + mu + tau) * I
           dD  <- delta * I - (gamma + tau + alpha + mu) * D
           list(c(dS, dI, dD))
         })
       },
       c(beta = beta, delta = delta, sigma = sigma, pi = pi, gamma = gamma, p = p,
         tau = tau, q = q, alpha = alpha, mu = mu))
}
```

Let's run an example:

```{r}
delta <- .01
sid_sim <- sid(S0    = 1e5 - 350,
               I0    = 0,
               D0    = 350,
               beta  = .00001,
               delta = delta,
               sigma = 0,
               pi    = 0,
               gamma = 0,
               p     = .1,
               tau   = 0,
               q     = .1,
               alpha = 1 / 3,
               mu    = 1 / 70,
               times = seq2(0, 10000))

opar <- par(mfrow = c(1, 3))

with(sid_sim, {
  plotl(time, I, col = 2, xlab = "time (year)", ylab = "infection prevalence")
  plotl(time, D, col = 3, xlab = "time (year)", ylab = "disease prevalence")
  plotl(time, delta * I, col = 4, xlab = "time (year)", ylab = "yearly disease incidence")
})

par(opar)
```

### Calibration

* infection prevalence: somewhere between 10 and 30% of the population
* disease prevalence: somewhere between 50 and 500 / 100,000
* disease incidence: close to disease prevalence

A function that looks for the endemic equilibrium:

```{r}
equilibrium <- function(f, args, p = .1, eps = 1e-2) {
  sims <- do.call(f, args)
  nr <- nrow(sims)
  from <- nr - round(p * nr)
  final <- sims[(nr - round(p * nr)) : nr, -1]
  final_val <- tail(final, 1)
  while (max(map_dbl(final, ~ max(abs(diff(.x))))) > eps) {
    final_val <- tail(final, 1)
    args[paste0(names(final_val), "0")] <- final_val
    sims <- do.call(f, args)
    final <- sims[from : nr, -1]
  }
  unlist(final_val)
}
```

Let's try it:

```{r}
args <- list(S0    = 1e5 - 350,
             I0    = 0,
             D0    = 350,
             beta  = .00001,
             delta = .01,
             sigma = 0,
             pi    = 0,
             gamma = 0,
             p     = .1,
             tau   = 0,
             q     = .1,
             alpha = 1 / 3,
             mu    = 1 / 70,
             times = seq2(0, 10000))


out <- equilibrium(sid, args)
# per 100,000:
c(out, yearly_disease_incidence = args$delta * unname(out["I"]))
```

ABC:

```{r}
abc <- function(f, args, icdnc, target, n = 100, p = .1, eps = 1e-2) {
  idx <- which(map_int(args, length) == 2)
  
  get_eq <- function(x) {
    args[idx] <- x
    out <- equilibrium(f, args)[-1]
    c(out, icdnc(out, args))
  }
  
  vls <- args[idx] %>%
    map_df(~ runif(n, .x[1], .x[2])) %>% 
    t() %>% 
    as.data.frame()
  
  vls %>% 
    map(get_eq) %>% 
    map_lgl(~ all(.x > map(target, first) & .x < map(target, last))) %>% 
    extract(vls, .) %>% 
    t() %>% 
    as_tibble()
}
```

Let's try it:

```{r}
args <- list(S0    = 1e5 - 350,
             I0    = 0,
             D0    = 350,
             beta  = c(.000005, .000015),
             delta = c(.005, .015),
             sigma = 0,
             pi    = 0,
             gamma = 0,
             p     = .1,
             tau   = 0,
             q     = .1,
             alpha = 1 / 3,
             mu    = 1 / 70,
             times = seq2(0, 10000))

out <- abc(sid, args, function(x, y) y$delta * x["I"],
    list(c(5000, 35000), c(50, 500), c(50, 500)), 1000)

with(out, plot(beta, delta))
```


### A minimalist SID

![Flow diagram of a minimalist version of the SID model.](tinySID.png){width=450 #fig-tinySID}

#### Dynamics

$$
\begin{align} 
  \frac{dS}{dt} &= (\sigma + \pi) I + \alpha D - \beta DS \\
  \frac{dI}{dt} &= \beta DS - (\delta + \sigma + \pi) I   \\
  \frac{dD}{dt} &= \delta I - \alpha D
\end{align}
$$

R code:

```{r}
sid_dyn <- function(N, I0 = 0, D0, beta, sigma, pi, delta, alpha, times) {
  ode2(c(S = N - I0 - D0, I = I0, D = D0),
       times,
       function(time, state, pars) {
         with(as.list(c(state, pars)), {
           infection <- beta * D * S
           dS  <- (sigma + pi) * I + alpha * D - infection
           dI  <- infection - (delta + sigma + pi) * I
           dD  <- delta * I - alpha * D
           list(c(dS, dI, dD))
         })
       },
       c(beta = beta, sigma = sigma, pi = pi, delta = delta, alpha = alpha))
}
```

#### Equilibrium

$$
\begin{align} 
  S^* &= N - I^* - D^*             \\
  I^* &= \frac{\alpha}{\delta} D^* \\
  D^* &= \frac{\delta}{\alpha + \delta} N -
         \frac{\alpha}{\alpha + \delta} \frac{\delta + \sigma + \pi}{\beta}
\end{align}
$$

R code:

```{r}
sid_equ <- function(N, beta, sigma, pi, delta, alpha) {
  Dstar <- (delta * N - alpha * (delta + sigma + pi) / beta) / (alpha + delta)
  Istar <- alpha * Dstar / delta
  c(S = N - Istar - Dstar, I = Istar, D = Dstar)
}
```

Verification:

```{r}
N <- 1e5
D0 <- 350
beta <- .000001
sigma <- 0
pi <- 0
delta <- .0001
alpha <- 1 / 70

sims <- sid_dyn(N = N, I0 = 0, D0 = D0, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha, times = seq2(0, 25000))

equs <- sid_equ(N = N, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha)

opar <- par(mfrow = c(1, 3))
with(sims, {
  plotl(time, I, col = 2, xlab = "time (year)", ylab = "infection prevalence")
  abline(h = equs["I"], col = 2)
  plotl(time, D, col = 3, xlab = "time (year)", ylab = "disease prevalence")
  abline(h = equs["D"], col = 3)
  plotl(time, delta * I, col = 4, xlab = "time (year)", ylab = "yearly disease incidence")
})
par(opar)
```

Minus log-likelihood:

```{r}
mLL <- function(beta, sigma, delta) {
  equs <- sid_equ(1e5, beta, sigma, 0, delta, alpha = 1 / 70)
    - dpois2(inf_prev, equs["I"]) -
      dpois2(dis_prev, equs["D"]) -
      dpois2(dis_incd, equs["I"] * delta)
}
```

In Vietnam:



```{r}
make_mLL <- function(inf_prev, dis_prev, dis_incd, delta = , alpha = 322 / 176, N = 1e5, pi = 0) {
  function(beta, sigma, delta) {
    delta <- exp(delta)
    equs <- sid_equ(N, exp(beta), exp(sigma), pi, delta, alpha)
    if (any(equs < 0)) return(Inf)
    - dpois2(inf_prev, equs["I"]) -
      dpois2(dis_prev, equs["D"]) -
      dpois2(dis_incd, equs["I"] * delta)
  }
}
```


```{r}
make_mLL <- function(inf_prev, dis_prev, dis_incd, N = 1e5, pi = 0) {
  alpha <- dis_incd / dis_prev
  delta <- alpha * dis_prev / inf_prev
  function(beta, sigma) {
    equs <- sid_equ(N, exp(beta), exp(sigma), pi, delta, alpha)
    if (any(equs < 0)) return(Inf)
    - dpois2(inf_prev, equs["I"]) -
      dpois2(dis_prev, equs["D"]) -
      dpois2(dis_incd, equs["I"] * delta)
  }
}
```


```{r}
make_mLL(10000, 176, 322)(log(.00005), log(1e-16))
```

```{r}
mle3 <- function(...) {
  estimate <- mle2(...)
  estimate@fullcoef <- exp(coef(out))
  estimate
}
```



```{r}
out <- mle3(make_mLL(85000, 600, 9), map(list(beta = 1e-6, sigma = 1e-16, delta = 1e-4), log))
```




