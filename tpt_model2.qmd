---
title: "TPT model"
format: html
editor: source
toc: true
number-sections: true
echo: true
code-fold: false
warning: false
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo       = TRUE,
                      message    = FALSE,
                      cache      = TRUE,
                      autodep    = TRUE,
#                      dev.args   = list(pointsize = 11),
                      fig.height = 5,
                      fig.width  = 1.4 * 5,
                      fig.retina = 2,
                      fig.align  = "center")
```

All the data and source code files are [here](https://github.com/TB-DURATION/tpt-model).

You can ask report errors or for additional analysis [here](https://github.com/TB-DURATION/tpt-model/issues).

## Introduction

## Packages

Required: `deSolve`, `tibble`, `purrr`, `dplyr`, `magrittr`, `bbmle`, `RColorBrewer`

```{r}
library(tibble)
library(purrr)
library(dplyr)
library(magrittr)
library(bbmle)
```

## Utilitary functions

```{r}
lwd_val <- 2
```

```{r}
ode2 <- function(...) tibble::as_tibble(as.data.frame(deSolve::ode(...)))
```

```{r}
seq2 <- function(...) seq(..., le = 512)
```

```{r}
plotl <- function(...) plot(..., type = "l", lwd = 2)
```

```{r}
lines2 <- function(...) lines(..., lwd = 2)
```

```{r}
legend2 <- function(...) legend(..., bty = "n")
```

```{r}
dpois2 <- function(...) dpois(..., log = TRUE)
```

```{r}
abline2 <- function(..., col = 2) abline(..., lwd = lwd_val, col = col)
```

```{r}
plot2 <- function(..., col = 4) plot(..., type = "l", lwd = lwd_val, col = col)
```


## Epidemiological models

### A minimalist SID

![Flow diagram of a minimalist version of the SID model.](tinySID.png){width=450 #fig-tinySID}

#### Dynamics

$$
\begin{align} 
  \frac{dS}{dt} &= (\sigma + \pi) I + \alpha D - \beta DS \\
  \frac{dI}{dt} &= \beta DS - (\delta + \sigma + \pi) I   \\
  \frac{dD}{dt} &= \delta I - \alpha D
\end{align}
$$

R code:

```{r}
sid_dyn <- function(N, I0 = 0, D0, beta, sigma, pi, delta, alpha, times) {
  ode2(c(S = N - I0 - D0, I = I0, D = D0),
       times,
       function(time, state, pars) {
         with(as.list(c(state, pars)), {
           infection <- beta * D * S
           dS  <- (sigma + pi) * I + alpha * D - infection
           dI  <- infection - (delta + sigma + pi) * I
           dD  <- delta * I - alpha * D
           list(c(dS, dI, dD))
         })
       },
       c(beta = beta, sigma = sigma, pi = pi, delta = delta, alpha = alpha))
}
```

#### Equilibrium

$$
\begin{align} 
  S^* &= N - I^* - D^*             \\
  I^* &= \frac{\alpha}{\delta} D^* \\
  D^* &= \frac{\delta}{\alpha + \delta} N -
         \frac{\alpha}{\alpha + \delta} \frac{\delta + \sigma + \pi}{\beta}
\end{align}
$$

R code:

```{r}
sid_equ <- function(N, beta, sigma, pi, delta, alpha) {
  Dstar <- (delta * N - alpha * (delta + sigma + pi) / beta) / (alpha + delta)
  Istar <- alpha * Dstar / delta
  c(S = N - Istar - Dstar, I = Istar, D = Dstar)
}
```

Verification:

```{r}
N <- 1e5
D0 <- 350
beta <- .000001
sigma <- 0
pi <- 0
delta <- .0001
alpha <- 1 / 70

sims <- sid_dyn(N = N, I0 = 0, D0 = D0, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha, times = seq2(0, 25000))

equs <- sid_equ(N = N, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha)

opar <- par(mfrow = c(1, 3))
with(sims, {
  plotl(time, I, col = 2, xlab = "time (year)", ylab = "infection prevalence")
  abline(h = equs["I"], col = 2)
  plotl(time, D, col = 3, xlab = "time (year)", ylab = "disease prevalence")
  abline(h = equs["D"], col = 3)
  plotl(time, delta * I, col = 4, xlab = "time (year)", ylab = "yearly disease incidence")
  abline(h = delta * equs["I"], col = 4)
})
par(opar)
```

#### Calibration

In absence of TPT (i.e. $\pi = 0$), let's further assume that $\sigma = 0$. Let's call
$d$ the yearly disease incidence. Then,

$$
\begin{align} 
  \delta &= \frac{d^*}{I^*}             \\
  \alpha &= \frac{D^*}{d^*}   \\
  \beta  &= \frac{N}{\alpha} - \frac{\alpha + \delta}{\alpha \delta} D^*
\end{align}
$$

Corresponding R code:

```{r}
param_val <- function(inf_prev, dis_prev, dis_incd, N = 1e5) {
  delta <- dis_incd / inf_prev
  alpha <- dis_incd / dis_prev
  c(alpha = alpha,
    beta  = alpha * delta / (delta * N - (alpha + delta) * dis_prev),
    delta = delta)
}
```

In Vietnam:

* prevalence of infection: somewhere between 10 and 30% of the population?
* prevalence of disease: 176 / 100,000
* yearly incidence of disease: 322 / 100,000

```{r}
(p_val <- param_val(2e4, 176, 322))
```

Let's see:

```{r}
N <- 1e5
D0 <- 176
beta  <- p_val[["beta"]]
sigma <- 0
pi <- 0
delta <- p_val[["delta"]]
alpha <- p_val[["alpha"]]

sims <- sid_dyn(N = N, I0 = 0, D0 = D0, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha, times = seq2(0, 3000))

equs <- sid_equ(N = N, beta = beta, sigma = sigma, pi = pi,
                delta = delta, alpha = alpha)

opar <- par(mfrow = c(1, 3))
with(sims, {
  plotl(time, I, col = 2, xlab = "time (year)", ylab = "infection prevalence")
  abline(h = equs["I"], col = 2)
  plotl(time, D, col = 3, xlab = "time (year)", ylab = "disease prevalence")
  abline(h = equs["D"], col = 3)
  plotl(time, delta * I, col = 4, xlab = "time (year)", ylab = "yearly disease incidence")
  abline(h = delta * equs["I"], col = 4)
})
par(opar)
```

## Prophylaxis model

### The Hill equation

In what follows we will model many phenomena phenomenologically using the
3-parameter monotonically increasing Hill equation, the general equation of
which is

$$
y = Y\frac{x^h}{X^h + x^h}
$$

where $Y$ is the maximum value that $y$ can take, $X$ is the value of $x$ at
which $y$ reaches half of its maximum value $Y$ and $h$ is the Hill coefficient
that controls the shape of the relationship with S-shape for $0 < h < 1$ and a
simple saturating shape when $h \ge 1$.

```{r}
hill <- function(x, X, Y, h) {
  x2h <- x^h
  Y * x2h / (X^h + x2h)
}
```

Let's illustrate the properties of this equation:

```{r}
xs <- seq2(0, 40)
X <- 15
Y <- .8

plot(NA, xlim = c(0, max(xs)), ylim = c(0, Y), xlab = "x values", ylab = "y values")
abline2(v = X, col = "grey")
abline2(h = Y, col = "grey")

hs <- exp(seq(-3, 3))
cols <- rev(RColorBrewer::brewer.pal(n = length(hs), "Spectral"))
walk2(hs, cols, ~ lines2(xs, hill(xs, X, Y, h = .x), col = .y))
```

### Treatment uptake

We can model the probability of treatment uptake as a function of the treatment
duration using a Hill equation as so:

```{r}
ds <- seq2(0, 30)
plot2(ds, 1 - hill(ds, 15, 1, 4), ylim = 0:1,
      xlab = "duration of treatment (days)", ylab = "uptake probability")
```

### Treatment adherence and effective duration of treatment

Call $f(t)$ the probability that a person stops her treatment of day $t$, conditional to
the fact that she didn't stop it before $t$.

Let's assume that the probability $f$ that somebody stops his/her treatment
increases with the number of days s/he's been taking the treatment according to
a Hill equation, reflecting some **fatigue effect** of being in the treatment. Let's
further assume that this probability gets mitigated as we get close to the end of the
treatment, reflecting the effect that a person is not likely to drop a treatment anymore
when s/he gets close to the end of the treatment (**"finish line" effect**). This
mitigation effect $m \in [0,1]$ is modelled with a Hill equation as well. The
probability $p(t)$ that somebody on his/her day $t$ of treatment drops it then reads

$$
p(t) = m(t) \times f(t)
$$

From this we can express the probability that somebody stops his/her treatment
**at time $t$** as

$$
P(t) = p(t)\prod_{x=0}^{{}^{-}t}(1 - p(x))^{dx}
$$

The density of probability of the actual duration of treatment (*aka*
**effective duration of treatment**) can then be expressed by:

$$
\varphi(t, d) = \frac{P(t)}{\int_{0}^d P(x)dx}
$$

where $d$ is the **proposed duration of treatment**.

Let's look at some examples:
